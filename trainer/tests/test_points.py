import jax.numpy as jnp

from points import update_points_map_batch


def test_update_points_map_batch():
    points_map = jnp.zeros((4, 5, 5), dtype=jnp.int32)
    positions = jnp.array([[[-1, -1]], [[0, 1]], [[3, 2]], [[4, 0]]])
    points_gained = jnp.array([0, 1, 2, 3])   

    updated_points_map = update_points_map_batch(points_map, positions, points_gained)

    expected_points_map = jnp.array([
        [
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0, -1]
        ],
        [
            [  0,  0,  0,  0,  0],
            [  1,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0]
        ],
        [
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  1,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0]
        ],
        [
            [  0,  0,  0,  0,  1],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0,  0,  0,  0,  0]
        ],
    ])

    assert jnp.array_equal(updated_points_map, expected_points_map)

def test_update_points_map_batch2():
    points_map = jnp.array([
        [
            [  0,  0,  1,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0, -1,  0,  0,  0],
            [  0,  0, -1,  0,  0],
            [  0,  0,  1,  0, -1]
        ],
        [
            [  0,  0,  1,  0,  0],
            [  0,  0,  0,  0,  0],
            [  0, -1,  0,  0,  0],
            [  0,  0, -1,  0,  0],
            [  0,  0,  1,  0, -1]
        ],
        [
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
        [
            [  1,  1,  1,  1,  1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
        [
            [  0,  0,  0,  0,  0],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
    ])

    positions = jnp.array([
        [
            [-1, -1], [1, 2], [2, 0], [4, 0], [4, 1]
        ],
        [
            [-1, -1], [1, 2], [2, 0], [4, 0], [4, 1]
        ],
        [
            [-1, -1], [1, 2], [2, 0], [4, 0], [4, 1]
        ],
        [
            [0, 0], [1, 0], [2, 0], [3, 0], [4, 0]
        ],
        [
            [0, 0], [1, 1], [2, 0], [3, 2], [4, 0]
        ],
    ])
    points_gained = jnp.array([0, 1, 2, 0, 1])

    updated_points_map = update_points_map_batch(points_map, positions, points_gained)

    expected_points_map = jnp.array([
        [
            [  0,  0, -1,  0, -1],
            [  0,  0,  0,  0, -1],
            [  0, -1,  0,  0,  0],
            [  0,  0, -1,  0,  0],
            [  0,  0,  1,  0, -1]
        ],
        [
            [  0,  0,  1,  0,  1],
            [  0,  0,  0,  0,  1],
            [  0, -1,  0,  0,  0],
            [  0,  0, -1,  0,  0],
            [  0,  0,  1,  0, -1]
        ],
        [
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
        [
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
        [
            [  1,  0,  1,  0,  1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1],
            [ -1, -1, -1, -1, -1]
        ],
    ])
    assert jnp.allclose(updated_points_map, expected_points_map)
